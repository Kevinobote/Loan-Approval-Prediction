{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "133fd199",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:26.415030Z",
     "iopub.status.busy": "2024-04-26T12:45:26.414610Z",
     "iopub.status.idle": "2024-04-26T12:45:28.964984Z",
     "shell.execute_reply": "2024-04-26T12:45:28.963612Z"
    },
    "papermill": {
     "duration": 2.567991,
     "end_time": "2024-04-26T12:45:28.968112",
     "exception": false,
     "start_time": "2024-04-26T12:45:26.400121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/loan-approval-prediction-dataset/loan_approval_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8bea0709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:28.996351Z",
     "iopub.status.busy": "2024-04-26T12:45:28.995841Z",
     "iopub.status.idle": "2024-04-26T12:45:29.073043Z",
     "shell.execute_reply": "2024-04-26T12:45:29.071870Z"
    },
    "papermill": {
     "duration": 0.094554,
     "end_time": "2024-04-26T12:45:29.075974",
     "exception": false,
     "start_time": "2024-04-26T12:45:28.981420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id   no_of_dependents      education  self_employed   income_annum  \\\n",
       "0        1                  2       Graduate             No        9600000   \n",
       "1        2                  0   Not Graduate            Yes        4100000   \n",
       "2        3                  3       Graduate             No        9100000   \n",
       "3        4                  3       Graduate             No        8200000   \n",
       "4        5                  5   Not Graduate            Yes        9800000   \n",
       "5        6                  0       Graduate            Yes        4800000   \n",
       "6        7                  5       Graduate             No        8700000   \n",
       "7        8                  2       Graduate            Yes        5700000   \n",
       "8        9                  0       Graduate            Yes         800000   \n",
       "9       10                  5   Not Graduate             No        1100000   \n",
       "\n",
       "    loan_amount   loan_term   cibil_score   residential_assets_value  \\\n",
       "0      29900000          12           778                    2400000   \n",
       "1      12200000           8           417                    2700000   \n",
       "2      29700000          20           506                    7100000   \n",
       "3      30700000           8           467                   18200000   \n",
       "4      24200000          20           382                   12400000   \n",
       "5      13500000          10           319                    6800000   \n",
       "6      33000000           4           678                   22500000   \n",
       "7      15000000          20           382                   13200000   \n",
       "8       2200000          20           782                    1300000   \n",
       "9       4300000          10           388                    3200000   \n",
       "\n",
       "    commercial_assets_value   luxury_assets_value   bank_asset_value  \\\n",
       "0                  17600000              22700000            8000000   \n",
       "1                   2200000               8800000            3300000   \n",
       "2                   4500000              33300000           12800000   \n",
       "3                   3300000              23300000            7900000   \n",
       "4                   8200000              29400000            5000000   \n",
       "5                   8300000              13700000            5100000   \n",
       "6                  14800000              29200000            4300000   \n",
       "7                   5700000              11800000            6000000   \n",
       "8                    800000               2800000             600000   \n",
       "9                   1400000               3300000            1600000   \n",
       "\n",
       "   loan_status  \n",
       "0     Approved  \n",
       "1     Rejected  \n",
       "2     Rejected  \n",
       "3     Rejected  \n",
       "4     Rejected  \n",
       "5     Rejected  \n",
       "6     Approved  \n",
       "7     Rejected  \n",
       "8     Approved  \n",
       "9     Rejected  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/loan-approval-prediction-dataset/loan_approval_dataset.csv')\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3dfa73d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.104835Z",
     "iopub.status.busy": "2024-04-26T12:45:29.104385Z",
     "iopub.status.idle": "2024-04-26T12:45:29.132521Z",
     "shell.execute_reply": "2024-04-26T12:45:29.131352Z"
    },
    "papermill": {
     "duration": 0.045755,
     "end_time": "2024-04-26T12:45:29.135027",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.089272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4269 entries, 0 to 4268\n",
      "Data columns (total 13 columns):\n",
      " #   Column                     Non-Null Count  Dtype \n",
      "---  ------                     --------------  ----- \n",
      " 0   loan_id                    4269 non-null   int64 \n",
      " 1    no_of_dependents          4269 non-null   int64 \n",
      " 2    education                 4269 non-null   object\n",
      " 3    self_employed             4269 non-null   object\n",
      " 4    income_annum              4269 non-null   int64 \n",
      " 5    loan_amount               4269 non-null   int64 \n",
      " 6    loan_term                 4269 non-null   int64 \n",
      " 7    cibil_score               4269 non-null   int64 \n",
      " 8    residential_assets_value  4269 non-null   int64 \n",
      " 9    commercial_assets_value   4269 non-null   int64 \n",
      " 10   luxury_assets_value       4269 non-null   int64 \n",
      " 11   bank_asset_value          4269 non-null   int64 \n",
      " 12   loan_status               4269 non-null   object\n",
      "dtypes: int64(10), object(3)\n",
      "memory usage: 433.7+ KB\n"
     ]
    }
   ],
   "source": [
    "#checking the shape of the dataframe\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c1439353",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.163608Z",
     "iopub.status.busy": "2024-04-26T12:45:29.163187Z",
     "iopub.status.idle": "2024-04-26T12:45:29.174108Z",
     "shell.execute_reply": "2024-04-26T12:45:29.172940Z"
    },
    "papermill": {
     "duration": 0.028486,
     "end_time": "2024-04-26T12:45:29.176353",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.147867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_id                      0\n",
       " no_of_dependents            0\n",
       " education                   0\n",
       " self_employed               0\n",
       " income_annum                0\n",
       " loan_amount                 0\n",
       " loan_term                   0\n",
       " cibil_score                 0\n",
       " residential_assets_value    0\n",
       " commercial_assets_value     0\n",
       " luxury_assets_value         0\n",
       " bank_asset_value            0\n",
       " loan_status                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking null values\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "23d6090d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.204567Z",
     "iopub.status.busy": "2024-04-26T12:45:29.203912Z",
     "iopub.status.idle": "2024-04-26T12:45:29.252596Z",
     "shell.execute_reply": "2024-04-26T12:45:29.251165Z"
    },
    "papermill": {
     "duration": 0.066175,
     "end_time": "2024-04-26T12:45:29.255502",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.189327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2135.000000</td>\n",
       "      <td>2.498712</td>\n",
       "      <td>5.059124e+06</td>\n",
       "      <td>1.513345e+07</td>\n",
       "      <td>10.900445</td>\n",
       "      <td>599.936051</td>\n",
       "      <td>7.472617e+06</td>\n",
       "      <td>4.973155e+06</td>\n",
       "      <td>1.512631e+07</td>\n",
       "      <td>4.976692e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1232.498479</td>\n",
       "      <td>1.695910</td>\n",
       "      <td>2.806840e+06</td>\n",
       "      <td>9.043363e+06</td>\n",
       "      <td>5.709187</td>\n",
       "      <td>172.430401</td>\n",
       "      <td>6.503637e+06</td>\n",
       "      <td>4.388966e+06</td>\n",
       "      <td>9.103754e+06</td>\n",
       "      <td>3.250185e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000e+05</td>\n",
       "      <td>3.000000e+05</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>300.000000</td>\n",
       "      <td>-1.000000e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.000000e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1068.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.700000e+06</td>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>453.000000</td>\n",
       "      <td>2.200000e+06</td>\n",
       "      <td>1.300000e+06</td>\n",
       "      <td>7.500000e+06</td>\n",
       "      <td>2.300000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2135.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.100000e+06</td>\n",
       "      <td>1.450000e+07</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>5.600000e+06</td>\n",
       "      <td>3.700000e+06</td>\n",
       "      <td>1.460000e+07</td>\n",
       "      <td>4.600000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3202.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.500000e+06</td>\n",
       "      <td>2.150000e+07</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>748.000000</td>\n",
       "      <td>1.130000e+07</td>\n",
       "      <td>7.600000e+06</td>\n",
       "      <td>2.170000e+07</td>\n",
       "      <td>7.100000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4269.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.900000e+06</td>\n",
       "      <td>3.950000e+07</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>2.910000e+07</td>\n",
       "      <td>1.940000e+07</td>\n",
       "      <td>3.920000e+07</td>\n",
       "      <td>1.470000e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           loan_id   no_of_dependents   income_annum   loan_amount  \\\n",
       "count  4269.000000        4269.000000   4.269000e+03  4.269000e+03   \n",
       "mean   2135.000000           2.498712   5.059124e+06  1.513345e+07   \n",
       "std    1232.498479           1.695910   2.806840e+06  9.043363e+06   \n",
       "min       1.000000           0.000000   2.000000e+05  3.000000e+05   \n",
       "25%    1068.000000           1.000000   2.700000e+06  7.700000e+06   \n",
       "50%    2135.000000           3.000000   5.100000e+06  1.450000e+07   \n",
       "75%    3202.000000           4.000000   7.500000e+06  2.150000e+07   \n",
       "max    4269.000000           5.000000   9.900000e+06  3.950000e+07   \n",
       "\n",
       "         loan_term   cibil_score   residential_assets_value  \\\n",
       "count  4269.000000   4269.000000               4.269000e+03   \n",
       "mean     10.900445    599.936051               7.472617e+06   \n",
       "std       5.709187    172.430401               6.503637e+06   \n",
       "min       2.000000    300.000000              -1.000000e+05   \n",
       "25%       6.000000    453.000000               2.200000e+06   \n",
       "50%      10.000000    600.000000               5.600000e+06   \n",
       "75%      16.000000    748.000000               1.130000e+07   \n",
       "max      20.000000    900.000000               2.910000e+07   \n",
       "\n",
       "        commercial_assets_value   luxury_assets_value   bank_asset_value  \n",
       "count              4.269000e+03          4.269000e+03       4.269000e+03  \n",
       "mean               4.973155e+06          1.512631e+07       4.976692e+06  \n",
       "std                4.388966e+06          9.103754e+06       3.250185e+06  \n",
       "min                0.000000e+00          3.000000e+05       0.000000e+00  \n",
       "25%                1.300000e+06          7.500000e+06       2.300000e+06  \n",
       "50%                3.700000e+06          1.460000e+07       4.600000e+06  \n",
       "75%                7.600000e+06          2.170000e+07       7.100000e+06  \n",
       "max                1.940000e+07          3.920000e+07       1.470000e+07  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#describe function\n",
    "\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef21be54",
   "metadata": {
    "papermill": {
     "duration": 0.013071,
     "end_time": "2024-04-26T12:45:29.282824",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.269753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "69f944f1",
   "metadata": {
    "papermill": {
     "duration": 0.013022,
     "end_time": "2024-04-26T12:45:29.309383",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.296361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "188cabe5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.338581Z",
     "iopub.status.busy": "2024-04-26T12:45:29.338170Z",
     "iopub.status.idle": "2024-04-26T12:45:29.350741Z",
     "shell.execute_reply": "2024-04-26T12:45:29.349628Z"
    },
    "papermill": {
     "duration": 0.030223,
     "end_time": "2024-04-26T12:45:29.353112",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.322889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated(keep=False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb6ba736",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.383047Z",
     "iopub.status.busy": "2024-04-26T12:45:29.382009Z",
     "iopub.status.idle": "2024-04-26T12:45:29.391767Z",
     "shell.execute_reply": "2024-04-26T12:45:29.390542Z"
    },
    "papermill": {
     "duration": 0.027536,
     "end_time": "2024-04-26T12:45:29.394362",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.366826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[' residential_assets_value'] = df[' residential_assets_value'].abs()\n",
    "\n",
    "(df[' residential_assets_value'] < 0).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb82c0d6",
   "metadata": {
    "papermill": {
     "duration": 0.013184,
     "end_time": "2024-04-26T12:45:29.421273",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.408089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Removing white spaces in column names and all values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d06568a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.450535Z",
     "iopub.status.busy": "2024-04-26T12:45:29.450112Z",
     "iopub.status.idle": "2024-04-26T12:45:29.509390Z",
     "shell.execute_reply": "2024-04-26T12:45:29.508169Z"
    },
    "papermill": {
     "duration": 0.077465,
     "end_time": "2024-04-26T12:45:29.512413",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.434948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/2650771957.py:3: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: x.strip() if isinstance(x,str) else x)\n"
     ]
    }
   ],
   "source": [
    "df.columns = df.columns.str.strip()\n",
    "\n",
    "df = df.applymap(lambda x: x.strip() if isinstance(x,str) else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e6fef350",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.542538Z",
     "iopub.status.busy": "2024-04-26T12:45:29.541904Z",
     "iopub.status.idle": "2024-04-26T12:45:29.555094Z",
     "shell.execute_reply": "2024-04-26T12:45:29.553922Z"
    },
    "papermill": {
     "duration": 0.031441,
     "end_time": "2024-04-26T12:45:29.557930",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.526489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4269 entries, 0 to 4268\n",
      "Data columns (total 13 columns):\n",
      " #   Column                    Non-Null Count  Dtype \n",
      "---  ------                    --------------  ----- \n",
      " 0   loan_id                   4269 non-null   int64 \n",
      " 1   no_of_dependents          4269 non-null   int64 \n",
      " 2   education                 4269 non-null   object\n",
      " 3   self_employed             4269 non-null   object\n",
      " 4   income_annum              4269 non-null   int64 \n",
      " 5   loan_amount               4269 non-null   int64 \n",
      " 6   loan_term                 4269 non-null   int64 \n",
      " 7   cibil_score               4269 non-null   int64 \n",
      " 8   residential_assets_value  4269 non-null   int64 \n",
      " 9   commercial_assets_value   4269 non-null   int64 \n",
      " 10  luxury_assets_value       4269 non-null   int64 \n",
      " 11  bank_asset_value          4269 non-null   int64 \n",
      " 12  loan_status               4269 non-null   object\n",
      "dtypes: int64(10), object(3)\n",
      "memory usage: 433.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6649869c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.587921Z",
     "iopub.status.busy": "2024-04-26T12:45:29.587508Z",
     "iopub.status.idle": "2024-04-26T12:45:29.627777Z",
     "shell.execute_reply": "2024-04-26T12:45:29.626622Z"
    },
    "papermill": {
     "duration": 0.05839,
     "end_time": "2024-04-26T12:45:29.630269",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.571879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4269.000000</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "      <td>4.269000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2135.000000</td>\n",
       "      <td>2.498712</td>\n",
       "      <td>5.059124e+06</td>\n",
       "      <td>1.513345e+07</td>\n",
       "      <td>10.900445</td>\n",
       "      <td>599.936051</td>\n",
       "      <td>7.473928e+06</td>\n",
       "      <td>4.973155e+06</td>\n",
       "      <td>1.512631e+07</td>\n",
       "      <td>4.976692e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1232.498479</td>\n",
       "      <td>1.695910</td>\n",
       "      <td>2.806840e+06</td>\n",
       "      <td>9.043363e+06</td>\n",
       "      <td>5.709187</td>\n",
       "      <td>172.430401</td>\n",
       "      <td>6.502129e+06</td>\n",
       "      <td>4.388966e+06</td>\n",
       "      <td>9.103754e+06</td>\n",
       "      <td>3.250185e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000e+05</td>\n",
       "      <td>3.000000e+05</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>300.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.000000e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1068.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.700000e+06</td>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>453.000000</td>\n",
       "      <td>2.200000e+06</td>\n",
       "      <td>1.300000e+06</td>\n",
       "      <td>7.500000e+06</td>\n",
       "      <td>2.300000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2135.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.100000e+06</td>\n",
       "      <td>1.450000e+07</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>5.600000e+06</td>\n",
       "      <td>3.700000e+06</td>\n",
       "      <td>1.460000e+07</td>\n",
       "      <td>4.600000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3202.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.500000e+06</td>\n",
       "      <td>2.150000e+07</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>748.000000</td>\n",
       "      <td>1.130000e+07</td>\n",
       "      <td>7.600000e+06</td>\n",
       "      <td>2.170000e+07</td>\n",
       "      <td>7.100000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4269.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.900000e+06</td>\n",
       "      <td>3.950000e+07</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>2.910000e+07</td>\n",
       "      <td>1.940000e+07</td>\n",
       "      <td>3.920000e+07</td>\n",
       "      <td>1.470000e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           loan_id  no_of_dependents  income_annum   loan_amount    loan_term  \\\n",
       "count  4269.000000       4269.000000  4.269000e+03  4.269000e+03  4269.000000   \n",
       "mean   2135.000000          2.498712  5.059124e+06  1.513345e+07    10.900445   \n",
       "std    1232.498479          1.695910  2.806840e+06  9.043363e+06     5.709187   \n",
       "min       1.000000          0.000000  2.000000e+05  3.000000e+05     2.000000   \n",
       "25%    1068.000000          1.000000  2.700000e+06  7.700000e+06     6.000000   \n",
       "50%    2135.000000          3.000000  5.100000e+06  1.450000e+07    10.000000   \n",
       "75%    3202.000000          4.000000  7.500000e+06  2.150000e+07    16.000000   \n",
       "max    4269.000000          5.000000  9.900000e+06  3.950000e+07    20.000000   \n",
       "\n",
       "       cibil_score  residential_assets_value  commercial_assets_value  \\\n",
       "count  4269.000000              4.269000e+03             4.269000e+03   \n",
       "mean    599.936051              7.473928e+06             4.973155e+06   \n",
       "std     172.430401              6.502129e+06             4.388966e+06   \n",
       "min     300.000000              0.000000e+00             0.000000e+00   \n",
       "25%     453.000000              2.200000e+06             1.300000e+06   \n",
       "50%     600.000000              5.600000e+06             3.700000e+06   \n",
       "75%     748.000000              1.130000e+07             7.600000e+06   \n",
       "max     900.000000              2.910000e+07             1.940000e+07   \n",
       "\n",
       "       luxury_assets_value  bank_asset_value  \n",
       "count         4.269000e+03      4.269000e+03  \n",
       "mean          1.512631e+07      4.976692e+06  \n",
       "std           9.103754e+06      3.250185e+06  \n",
       "min           3.000000e+05      0.000000e+00  \n",
       "25%           7.500000e+06      2.300000e+06  \n",
       "50%           1.460000e+07      4.600000e+06  \n",
       "75%           2.170000e+07      7.100000e+06  \n",
       "max           3.920000e+07      1.470000e+07  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60bd96a7",
   "metadata": {
    "papermill": {
     "duration": 0.013747,
     "end_time": "2024-04-26T12:45:29.658485",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.644738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3f9f9991",
   "metadata": {
    "papermill": {
     "duration": 0.013918,
     "end_time": "2024-04-26T12:45:29.686647",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.672729",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Adding Columns in the DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "315c77ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.717752Z",
     "iopub.status.busy": "2024-04-26T12:45:29.717312Z",
     "iopub.status.idle": "2024-04-26T12:45:29.742270Z",
     "shell.execute_reply": "2024-04-26T12:45:29.740998Z"
    },
    "papermill": {
     "duration": 0.043239,
     "end_time": "2024-04-26T12:45:29.744590",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.701351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>CB_Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id  no_of_dependents     education self_employed  income_annum  \\\n",
       "0        1                 2      Graduate            No       9600000   \n",
       "1        2                 0  Not Graduate           Yes       4100000   \n",
       "2        3                 3      Graduate            No       9100000   \n",
       "3        4                 3      Graduate            No       8200000   \n",
       "4        5                 5  Not Graduate           Yes       9800000   \n",
       "5        6                 0      Graduate           Yes       4800000   \n",
       "6        7                 5      Graduate            No       8700000   \n",
       "7        8                 2      Graduate           Yes       5700000   \n",
       "8        9                 0      Graduate           Yes        800000   \n",
       "9       10                 5  Not Graduate            No       1100000   \n",
       "\n",
       "   loan_amount  loan_term  cibil_score  residential_assets_value  \\\n",
       "0     29900000         12          778                   2400000   \n",
       "1     12200000          8          417                   2700000   \n",
       "2     29700000         20          506                   7100000   \n",
       "3     30700000          8          467                  18200000   \n",
       "4     24200000         20          382                  12400000   \n",
       "5     13500000         10          319                   6800000   \n",
       "6     33000000          4          678                  22500000   \n",
       "7     15000000         20          382                  13200000   \n",
       "8      2200000         20          782                   1300000   \n",
       "9      4300000         10          388                   3200000   \n",
       "\n",
       "   commercial_assets_value  luxury_assets_value  bank_asset_value loan_status  \\\n",
       "0                 17600000             22700000           8000000    Approved   \n",
       "1                  2200000              8800000           3300000    Rejected   \n",
       "2                  4500000             33300000          12800000    Rejected   \n",
       "3                  3300000             23300000           7900000    Rejected   \n",
       "4                  8200000             29400000           5000000    Rejected   \n",
       "5                  8300000             13700000           5100000    Rejected   \n",
       "6                 14800000             29200000           4300000    Approved   \n",
       "7                  5700000             11800000           6000000    Rejected   \n",
       "8                   800000              2800000            600000    Approved   \n",
       "9                  1400000              3300000           1600000    Rejected   \n",
       "\n",
       "   CB_Rating  \n",
       "0  Excellent  \n",
       "1       Poor  \n",
       "2       Poor  \n",
       "3       Poor  \n",
       "4       Poor  \n",
       "5       Poor  \n",
       "6       Good  \n",
       "7       Poor  \n",
       "8  Excellent  \n",
       "9       Poor  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#adding of the cibil rating column\n",
    "\n",
    "\n",
    "def cibil_rating(value):\n",
    "    if 300 <= value <= 549:\n",
    "        return 'Poor'\n",
    "    if 550 <= value <= 649:\n",
    "        return 'Average'\n",
    "    if 650 <= value <= 749:\n",
    "        return 'Good'\n",
    "    if 750 <= value <= 900:\n",
    "        return 'Excellent'\n",
    "    else:\n",
    "        return'Error'\n",
    "    \n",
    "df['CB_Rating'] = df['cibil_score'].apply(cibil_rating)\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc6912a3",
   "metadata": {
    "papermill": {
     "duration": 0.014231,
     "end_time": "2024-04-26T12:45:29.773757",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.759526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Adding income level column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b551c7ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.805580Z",
     "iopub.status.busy": "2024-04-26T12:45:29.804436Z",
     "iopub.status.idle": "2024-04-26T12:45:29.829280Z",
     "shell.execute_reply": "2024-04-26T12:45:29.828147Z"
    },
    "papermill": {
     "duration": 0.043096,
     "end_time": "2024-04-26T12:45:29.831664",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.788568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>CB_Rating</th>\n",
       "      <th>Income levels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Good</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Lower Middle</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id  no_of_dependents     education self_employed  income_annum  \\\n",
       "0        1                 2      Graduate            No       9600000   \n",
       "1        2                 0  Not Graduate           Yes       4100000   \n",
       "2        3                 3      Graduate            No       9100000   \n",
       "3        4                 3      Graduate            No       8200000   \n",
       "4        5                 5  Not Graduate           Yes       9800000   \n",
       "5        6                 0      Graduate           Yes       4800000   \n",
       "6        7                 5      Graduate            No       8700000   \n",
       "7        8                 2      Graduate           Yes       5700000   \n",
       "8        9                 0      Graduate           Yes        800000   \n",
       "9       10                 5  Not Graduate            No       1100000   \n",
       "\n",
       "   loan_amount  loan_term  cibil_score  residential_assets_value  \\\n",
       "0     29900000         12          778                   2400000   \n",
       "1     12200000          8          417                   2700000   \n",
       "2     29700000         20          506                   7100000   \n",
       "3     30700000          8          467                  18200000   \n",
       "4     24200000         20          382                  12400000   \n",
       "5     13500000         10          319                   6800000   \n",
       "6     33000000          4          678                  22500000   \n",
       "7     15000000         20          382                  13200000   \n",
       "8      2200000         20          782                   1300000   \n",
       "9      4300000         10          388                   3200000   \n",
       "\n",
       "   commercial_assets_value  luxury_assets_value  bank_asset_value loan_status  \\\n",
       "0                 17600000             22700000           8000000    Approved   \n",
       "1                  2200000              8800000           3300000    Rejected   \n",
       "2                  4500000             33300000          12800000    Rejected   \n",
       "3                  3300000             23300000           7900000    Rejected   \n",
       "4                  8200000             29400000           5000000    Rejected   \n",
       "5                  8300000             13700000           5100000    Rejected   \n",
       "6                 14800000             29200000           4300000    Approved   \n",
       "7                  5700000             11800000           6000000    Rejected   \n",
       "8                   800000              2800000            600000    Approved   \n",
       "9                  1400000              3300000           1600000    Rejected   \n",
       "\n",
       "   CB_Rating Income levels  \n",
       "0  Excellent          High  \n",
       "1       Poor  Upper Middle  \n",
       "2       Poor          High  \n",
       "3       Poor          High  \n",
       "4       Poor          High  \n",
       "5       Poor  Upper Middle  \n",
       "6       Good          High  \n",
       "7       Poor  Upper Middle  \n",
       "8  Excellent           Low  \n",
       "9       Poor  Lower Middle  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def income_levels(income):\n",
    "    if 100000  <= income <= 1000000:\n",
    "        return 'Low'\n",
    "    if 1000001 <= income <= 4000000:\n",
    "        return 'Lower Middle'\n",
    "    if 4000001 <= income <= 7500000:\n",
    "        return 'Upper Middle'\n",
    "    if 7500001 <= income <= 10000000:\n",
    "        return 'High'\n",
    "    else:\n",
    "        return 'Error'\n",
    "    \n",
    "    \n",
    "df['Income levels'] = df['income_annum'].apply(income_levels)\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f9efc26",
   "metadata": {
    "papermill": {
     "duration": 0.014632,
     "end_time": "2024-04-26T12:45:29.861254",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.846622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Adding Loan Column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c73331f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.894472Z",
     "iopub.status.busy": "2024-04-26T12:45:29.893827Z",
     "iopub.status.idle": "2024-04-26T12:45:29.918797Z",
     "shell.execute_reply": "2024-04-26T12:45:29.917566Z"
    },
    "papermill": {
     "duration": 0.04486,
     "end_time": "2024-04-26T12:45:29.921480",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.876620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>CB_Rating</th>\n",
       "      <th>Income levels</th>\n",
       "      <th>Loan Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Good</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>Low</td>\n",
       "      <td>Bronze</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Lower Middle</td>\n",
       "      <td>Bronze</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id  no_of_dependents     education self_employed  income_annum  \\\n",
       "0        1                 2      Graduate            No       9600000   \n",
       "1        2                 0  Not Graduate           Yes       4100000   \n",
       "2        3                 3      Graduate            No       9100000   \n",
       "3        4                 3      Graduate            No       8200000   \n",
       "4        5                 5  Not Graduate           Yes       9800000   \n",
       "5        6                 0      Graduate           Yes       4800000   \n",
       "6        7                 5      Graduate            No       8700000   \n",
       "7        8                 2      Graduate           Yes       5700000   \n",
       "8        9                 0      Graduate           Yes        800000   \n",
       "9       10                 5  Not Graduate            No       1100000   \n",
       "\n",
       "   loan_amount  loan_term  cibil_score  residential_assets_value  \\\n",
       "0     29900000         12          778                   2400000   \n",
       "1     12200000          8          417                   2700000   \n",
       "2     29700000         20          506                   7100000   \n",
       "3     30700000          8          467                  18200000   \n",
       "4     24200000         20          382                  12400000   \n",
       "5     13500000         10          319                   6800000   \n",
       "6     33000000          4          678                  22500000   \n",
       "7     15000000         20          382                  13200000   \n",
       "8      2200000         20          782                   1300000   \n",
       "9      4300000         10          388                   3200000   \n",
       "\n",
       "   commercial_assets_value  luxury_assets_value  bank_asset_value loan_status  \\\n",
       "0                 17600000             22700000           8000000    Approved   \n",
       "1                  2200000              8800000           3300000    Rejected   \n",
       "2                  4500000             33300000          12800000    Rejected   \n",
       "3                  3300000             23300000           7900000    Rejected   \n",
       "4                  8200000             29400000           5000000    Rejected   \n",
       "5                  8300000             13700000           5100000    Rejected   \n",
       "6                 14800000             29200000           4300000    Approved   \n",
       "7                  5700000             11800000           6000000    Rejected   \n",
       "8                   800000              2800000            600000    Approved   \n",
       "9                  1400000              3300000           1600000    Rejected   \n",
       "\n",
       "   CB_Rating Income levels Loan Rating  \n",
       "0  Excellent          High        Gold  \n",
       "1       Poor  Upper Middle      Silver  \n",
       "2       Poor          High        Gold  \n",
       "3       Poor          High    Platinum  \n",
       "4       Poor          High        Gold  \n",
       "5       Poor  Upper Middle      Silver  \n",
       "6       Good          High    Platinum  \n",
       "7       Poor  Upper Middle      Silver  \n",
       "8  Excellent           Low      Bronze  \n",
       "9       Poor  Lower Middle      Bronze  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def loan_rating(amount):\n",
    "    if 100000 <= amount <= 10000000:\n",
    "        return 'Bronze'\n",
    "    if 10000001 <= amount <= 20000000:\n",
    "        return 'Silver'\n",
    "    if 20000001 <= amount <= 30000000:\n",
    "        return 'Gold'\n",
    "    if 30000001 <= amount <= 40000000:\n",
    "        return 'Platinum'\n",
    "    else:\n",
    "        return 'Error'\n",
    "    \n",
    "    \n",
    "df['Loan Rating'] = df['loan_amount'].apply(loan_rating)\n",
    "    \n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be437a80",
   "metadata": {
    "papermill": {
     "duration": 0.015492,
     "end_time": "2024-04-26T12:45:29.952682",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.937190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Loan Term Range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7b9f9603",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:29.986148Z",
     "iopub.status.busy": "2024-04-26T12:45:29.985238Z",
     "iopub.status.idle": "2024-04-26T12:45:30.010428Z",
     "shell.execute_reply": "2024-04-26T12:45:30.009286Z"
    },
    "papermill": {
     "duration": 0.044673,
     "end_time": "2024-04-26T12:45:30.012957",
     "exception": false,
     "start_time": "2024-04-26T12:45:29.968284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>CB_Rating</th>\n",
       "      <th>Income levels</th>\n",
       "      <th>Loan Rating</th>\n",
       "      <th>Loan Range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Intermediate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Intermediate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Long Term</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "      <td>Intermediate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Long Term</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Intermediate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Good</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "      <td>Short Term</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Long Term</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>Low</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>Long Term</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Lower Middle</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>Intermediate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id  no_of_dependents     education self_employed  income_annum  \\\n",
       "0        1                 2      Graduate            No       9600000   \n",
       "1        2                 0  Not Graduate           Yes       4100000   \n",
       "2        3                 3      Graduate            No       9100000   \n",
       "3        4                 3      Graduate            No       8200000   \n",
       "4        5                 5  Not Graduate           Yes       9800000   \n",
       "5        6                 0      Graduate           Yes       4800000   \n",
       "6        7                 5      Graduate            No       8700000   \n",
       "7        8                 2      Graduate           Yes       5700000   \n",
       "8        9                 0      Graduate           Yes        800000   \n",
       "9       10                 5  Not Graduate            No       1100000   \n",
       "\n",
       "   loan_amount  loan_term  cibil_score  residential_assets_value  \\\n",
       "0     29900000         12          778                   2400000   \n",
       "1     12200000          8          417                   2700000   \n",
       "2     29700000         20          506                   7100000   \n",
       "3     30700000          8          467                  18200000   \n",
       "4     24200000         20          382                  12400000   \n",
       "5     13500000         10          319                   6800000   \n",
       "6     33000000          4          678                  22500000   \n",
       "7     15000000         20          382                  13200000   \n",
       "8      2200000         20          782                   1300000   \n",
       "9      4300000         10          388                   3200000   \n",
       "\n",
       "   commercial_assets_value  luxury_assets_value  bank_asset_value loan_status  \\\n",
       "0                 17600000             22700000           8000000    Approved   \n",
       "1                  2200000              8800000           3300000    Rejected   \n",
       "2                  4500000             33300000          12800000    Rejected   \n",
       "3                  3300000             23300000           7900000    Rejected   \n",
       "4                  8200000             29400000           5000000    Rejected   \n",
       "5                  8300000             13700000           5100000    Rejected   \n",
       "6                 14800000             29200000           4300000    Approved   \n",
       "7                  5700000             11800000           6000000    Rejected   \n",
       "8                   800000              2800000            600000    Approved   \n",
       "9                  1400000              3300000           1600000    Rejected   \n",
       "\n",
       "   CB_Rating Income levels Loan Rating    Loan Range  \n",
       "0  Excellent          High        Gold  Intermediate  \n",
       "1       Poor  Upper Middle      Silver  Intermediate  \n",
       "2       Poor          High        Gold     Long Term  \n",
       "3       Poor          High    Platinum  Intermediate  \n",
       "4       Poor          High        Gold     Long Term  \n",
       "5       Poor  Upper Middle      Silver  Intermediate  \n",
       "6       Good          High    Platinum    Short Term  \n",
       "7       Poor  Upper Middle      Silver     Long Term  \n",
       "8  Excellent           Low      Bronze     Long Term  \n",
       "9       Poor  Lower Middle      Bronze  Intermediate  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def loan_term_range (term):\n",
    "    if 0 <= term <= 7:\n",
    "        return 'Short Term'\n",
    "    if 8 <= term <= 14:\n",
    "        return 'Intermediate'\n",
    "    if 15 <= term <= 20 :\n",
    "        return 'Long Term'\n",
    "    else:\n",
    "        return 'error'\n",
    "    \n",
    "df['Loan Range'] = df['loan_term'].apply(loan_term_range)\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a0fa6f59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:30.047528Z",
     "iopub.status.busy": "2024-04-26T12:45:30.046885Z",
     "iopub.status.idle": "2024-04-26T12:45:30.073771Z",
     "shell.execute_reply": "2024-04-26T12:45:30.072472Z"
    },
    "papermill": {
     "duration": 0.047436,
     "end_time": "2024-04-26T12:45:30.076673",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.029237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_id</th>\n",
       "      <th>no_of_dependents</th>\n",
       "      <th>education</th>\n",
       "      <th>self_employed</th>\n",
       "      <th>income_annum</th>\n",
       "      <th>loan_amount</th>\n",
       "      <th>loan_term</th>\n",
       "      <th>cibil_score</th>\n",
       "      <th>residential_assets_value</th>\n",
       "      <th>commercial_assets_value</th>\n",
       "      <th>luxury_assets_value</th>\n",
       "      <th>bank_asset_value</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>CB_Rating</th>\n",
       "      <th>Income levels</th>\n",
       "      <th>Loan Rating</th>\n",
       "      <th>Loan Range</th>\n",
       "      <th>Number of Dependents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9600000</td>\n",
       "      <td>29900000</td>\n",
       "      <td>12</td>\n",
       "      <td>778</td>\n",
       "      <td>2400000</td>\n",
       "      <td>17600000</td>\n",
       "      <td>22700000</td>\n",
       "      <td>8000000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Intermediate</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4100000</td>\n",
       "      <td>12200000</td>\n",
       "      <td>8</td>\n",
       "      <td>417</td>\n",
       "      <td>2700000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>8800000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Intermediate</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>9100000</td>\n",
       "      <td>29700000</td>\n",
       "      <td>20</td>\n",
       "      <td>506</td>\n",
       "      <td>7100000</td>\n",
       "      <td>4500000</td>\n",
       "      <td>33300000</td>\n",
       "      <td>12800000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Long Term</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8200000</td>\n",
       "      <td>30700000</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>18200000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>23300000</td>\n",
       "      <td>7900000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "      <td>Intermediate</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9800000</td>\n",
       "      <td>24200000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>12400000</td>\n",
       "      <td>8200000</td>\n",
       "      <td>29400000</td>\n",
       "      <td>5000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>High</td>\n",
       "      <td>Gold</td>\n",
       "      <td>Long Term</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4800000</td>\n",
       "      <td>13500000</td>\n",
       "      <td>10</td>\n",
       "      <td>319</td>\n",
       "      <td>6800000</td>\n",
       "      <td>8300000</td>\n",
       "      <td>13700000</td>\n",
       "      <td>5100000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Intermediate</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>8700000</td>\n",
       "      <td>33000000</td>\n",
       "      <td>4</td>\n",
       "      <td>678</td>\n",
       "      <td>22500000</td>\n",
       "      <td>14800000</td>\n",
       "      <td>29200000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Good</td>\n",
       "      <td>High</td>\n",
       "      <td>Platinum</td>\n",
       "      <td>Short Term</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5700000</td>\n",
       "      <td>15000000</td>\n",
       "      <td>20</td>\n",
       "      <td>382</td>\n",
       "      <td>13200000</td>\n",
       "      <td>5700000</td>\n",
       "      <td>11800000</td>\n",
       "      <td>6000000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Long Term</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>800000</td>\n",
       "      <td>2200000</td>\n",
       "      <td>20</td>\n",
       "      <td>782</td>\n",
       "      <td>1300000</td>\n",
       "      <td>800000</td>\n",
       "      <td>2800000</td>\n",
       "      <td>600000</td>\n",
       "      <td>Approved</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>Low</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>Long Term</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>1100000</td>\n",
       "      <td>4300000</td>\n",
       "      <td>10</td>\n",
       "      <td>388</td>\n",
       "      <td>3200000</td>\n",
       "      <td>1400000</td>\n",
       "      <td>3300000</td>\n",
       "      <td>1600000</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>Poor</td>\n",
       "      <td>Lower Middle</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>Intermediate</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_id  no_of_dependents     education self_employed  income_annum  \\\n",
       "0        1                 2      Graduate            No       9600000   \n",
       "1        2                 0  Not Graduate           Yes       4100000   \n",
       "2        3                 3      Graduate            No       9100000   \n",
       "3        4                 3      Graduate            No       8200000   \n",
       "4        5                 5  Not Graduate           Yes       9800000   \n",
       "5        6                 0      Graduate           Yes       4800000   \n",
       "6        7                 5      Graduate            No       8700000   \n",
       "7        8                 2      Graduate           Yes       5700000   \n",
       "8        9                 0      Graduate           Yes        800000   \n",
       "9       10                 5  Not Graduate            No       1100000   \n",
       "\n",
       "   loan_amount  loan_term  cibil_score  residential_assets_value  \\\n",
       "0     29900000         12          778                   2400000   \n",
       "1     12200000          8          417                   2700000   \n",
       "2     29700000         20          506                   7100000   \n",
       "3     30700000          8          467                  18200000   \n",
       "4     24200000         20          382                  12400000   \n",
       "5     13500000         10          319                   6800000   \n",
       "6     33000000          4          678                  22500000   \n",
       "7     15000000         20          382                  13200000   \n",
       "8      2200000         20          782                   1300000   \n",
       "9      4300000         10          388                   3200000   \n",
       "\n",
       "   commercial_assets_value  luxury_assets_value  bank_asset_value loan_status  \\\n",
       "0                 17600000             22700000           8000000    Approved   \n",
       "1                  2200000              8800000           3300000    Rejected   \n",
       "2                  4500000             33300000          12800000    Rejected   \n",
       "3                  3300000             23300000           7900000    Rejected   \n",
       "4                  8200000             29400000           5000000    Rejected   \n",
       "5                  8300000             13700000           5100000    Rejected   \n",
       "6                 14800000             29200000           4300000    Approved   \n",
       "7                  5700000             11800000           6000000    Rejected   \n",
       "8                   800000              2800000            600000    Approved   \n",
       "9                  1400000              3300000           1600000    Rejected   \n",
       "\n",
       "   CB_Rating Income levels Loan Rating    Loan Range Number of Dependents  \n",
       "0  Excellent          High        Gold  Intermediate             Moderate  \n",
       "1       Poor  Upper Middle      Silver  Intermediate                  Low  \n",
       "2       Poor          High        Gold     Long Term             Moderate  \n",
       "3       Poor          High    Platinum  Intermediate             Moderate  \n",
       "4       Poor          High        Gold     Long Term                 High  \n",
       "5       Poor  Upper Middle      Silver  Intermediate                  Low  \n",
       "6       Good          High    Platinum    Short Term                 High  \n",
       "7       Poor  Upper Middle      Silver     Long Term             Moderate  \n",
       "8  Excellent           Low      Bronze     Long Term                  Low  \n",
       "9       Poor  Lower Middle      Bronze  Intermediate                 High  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of Dependents\n",
    "\n",
    "def number_dependents (number):\n",
    "    if 0 <= number <= 1:\n",
    "        return 'Low'\n",
    "    if 2 <= number <= 3:\n",
    "        return 'Moderate'\n",
    "    if 4 <= number <= 5:\n",
    "        return 'High'\n",
    "    else:\n",
    "        return 'Error'\n",
    "    \n",
    "df['Number of Dependents'] = df['no_of_dependents'].apply(number_dependents)\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b318de3e",
   "metadata": {
    "papermill": {
     "duration": 0.016445,
     "end_time": "2024-04-26T12:45:30.110200",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.093755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "663248be",
   "metadata": {
    "papermill": {
     "duration": 0.017659,
     "end_time": "2024-04-26T12:45:30.145513",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.127854",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e32cede",
   "metadata": {
    "papermill": {
     "duration": 0.01668,
     "end_time": "2024-04-26T12:45:30.179360",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.162680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Customer Segmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9ad8d611",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:30.214982Z",
     "iopub.status.busy": "2024-04-26T12:45:30.214580Z",
     "iopub.status.idle": "2024-04-26T12:45:30.229474Z",
     "shell.execute_reply": "2024-04-26T12:45:30.228270Z"
    },
    "papermill": {
     "duration": 0.0358,
     "end_time": "2024-04-26T12:45:30.232072",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.196272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Income levels</th>\n",
       "      <th>Number of Applicants</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Upper Middle</td>\n",
       "      <td>1548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lower Middle</td>\n",
       "      <td>1284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>High</td>\n",
       "      <td>1047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Low</td>\n",
       "      <td>390</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Income levels  Number of Applicants\n",
       "0  Upper Middle                  1548\n",
       "1  Lower Middle                  1284\n",
       "2          High                  1047\n",
       "3           Low                   390"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Grouping customers according to income levels\n",
    "\n",
    "income = df['Income levels'].value_counts().reset_index()\n",
    "\n",
    "Income = income.rename(columns={'count':'Number of Applicants'})\n",
    "\n",
    "Income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9dfa4a5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:30.270796Z",
     "iopub.status.busy": "2024-04-26T12:45:30.269471Z",
     "iopub.status.idle": "2024-04-26T12:45:30.550621Z",
     "shell.execute_reply": "2024-04-26T12:45:30.548747Z"
    },
    "papermill": {
     "duration": 0.305651,
     "end_time": "2024-04-26T12:45:30.555504",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.249853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAcoAAAGFCAYAAAB9krNlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABMGklEQVR4nO3deVhUZcMG8PvMMMO+Cig7oijgiluZKaSmla+p2fKapqRWZlrZar0t9mUula2WLZq2WLZom5qWJqbmLrjiiiAgu6wDwzAz5/uDwkgdWYZ5Zrl/18Vlzpw5cw8VN+ec53mOJMuyDCIiIroshegARERE1oxFSUREZAKLkoiIyAQWJRERkQksSiIiIhNYlERERCawKImIiExgURIREZnAoiQiIjKBRUlERGQCi5KIiMgEFiUREZEJLEoiIiITWJREREQmsCiJiIhMYFESERGZwKIkIiIygUVJRERkAouSiIjIBBYlERGRCSxKIiIiE1iUREREJrAoiYiITGBREhERmcCiJCIiMoFFSUREZAKLkoiIyAQWJRERkQksSiIiIhNYlERERCawKImIiExgURIREZnAoiQiIjKBRUlERGQCi5KIiMgEFiUREZEJLEoiIiITWJREREQmsCiJiIhMYFESEdElkpOTIUkSSktLr7jNihUr4OPjY3I/c+bMQc+ePev/npSUhNGjR5slo6WwKImImiAxMRGPPvroJY83pjREysjIgCRJUCqVyMnJafBcbm4unJycIEkSMjIyAADXXXcdcnNz4e3tLSCtdWFREhHZEYPBAKPReMXnQ0JC8NlnnzV47NNPP0VISEiDx9RqNdq1awdJklolpy1hURIRtYK/TzG+9NJLCAgIgJeXF6ZNmwadTle/TWJiImbMmIEZM2bA29sb/v7+eP755yHLcv02NTU1eOKJJxASEgJ3d3dcc801SE5Orn/+7yPZn376CXFxcXB2dsa5c+eumGvSpElYvnx5g8eWL1+OSZMmNXjscqdeV6xYgfDwcLi5uWHMmDEoLi6+ZP8LFixA27Zt4enpiSlTpkCr1Zr8PhmNRsyfPx/t27eHq6srevToge+++87kayyNRUlE1Eo2b96MtLQ0JCcn46uvvsKaNWvw0ksvNdjm008/hZOTE/bs2YO3334bb7zxBpYuXVr//IwZM7Bz506sWrUKhw4dwh133IGbbroJ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YgV8fHya9JqkpCSMHj26VfKQ7WJREpHNuVKhJScnQ5IklJaW4q677sLJkyctH47sDteAIiK75OrqCldXV9ExyA7wiJKI7NLlTr3OnTsXgYGB8PT0xNSpUzF79mz07Nnzkte+/vrrCAoKQps2bfDQQw+htlb84g0kDouSiBzCypUr8corr2DhwoXYv38/wsPDsWTJkku227JlC86cOYMtW7bg008/xYoVK7BixQrLByarwVOvRGST1q5dCw8PjwaPGQyGK27/7rvvYsqUKbj33nsBAC+88AJ+/fVXVFZWNtjO19cXixcvhlKpRExMDEaMGIHNmzfjvvvuM/+HIJvAI0oiskk33HADUlNTG3wtXbr0itufOHEC/fr1a/DYv/8OAF26dIFSeXH92aCgIBQUFJgvONkcHlESkU1yd3dHx44dGzyWnZ3d4v2qVA2X7ZMkCUaj7d6hhVqOR5RE5BA6d+6MvXv3Nnjs338nuhweURKRQ5g5cybuu+8+9OnTB9dddx2+/vprHDp0CFFRUaKjkZVjURKRQxg/fjzS09PxxBNPQKvV4s4770RSUhL27NkjOhpZOd49hIgc1o033oh27drh888/Fx2FrBiPKInIIVRVVeGDDz7A8OHDoVQq8dVXX2HTpk347bffREcjK8cjSiJyCNXV1Rg5ciRSUlKg1WrRuXNnPPfcc7jttttERyMrx6IkIiIygdNDiIiITGBREhERmcCiJCIiMoFFSUREZAKLkoiIyAQWJRERkQksSiIiIhNYlERERCawKImIiExgURIREZnAoiQiIjKBRUlERGQCi5KIiMgEFiUREZEJLEoiIiITWJREREQmsCiJiIhMYFESERGZwKIkIiIygUVJRERkAouSiIjIBBYlERGRCSxKIiIiE1iUREREJrAoiYiITGBREhERmcCiJCIiMoFFSUREZML/A2wa0MBz61ILAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting a pie chart\n",
    "\n",
    "plt.pie(Income['Number of Applicants'], labels=Income['Income levels'], autopct='%1.1f%%')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bd33f312",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:30.613260Z",
     "iopub.status.busy": "2024-04-26T12:45:30.612473Z",
     "iopub.status.idle": "2024-04-26T12:45:30.858294Z",
     "shell.execute_reply": "2024-04-26T12:45:30.857021Z"
    },
    "papermill": {
     "duration": 0.268921,
     "end_time": "2024-04-26T12:45:30.861112",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.592191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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8vKCiYkJzMzM4OPjg9TUVFmfK1euoFWrVjAwMICtrS0WLVpUBGtDREREH6oSDURpaWmoX78+AgIC3thv9+7dOHPmDGxsbHKN8/LywvXr1xEaGop9+/bh+PHjGDZsmDQ+JSUFHTt2hJ2dHSIiIrB48WLMnj0b69evL/T1ISIiog+TTkkuvHPnzujcufMb+/z9998YNWoUDh48iK5du8rGRUVFISQkBOfPn0fjxo0BAKtWrUKXLl2wZMkS2NjYIDg4GBkZGdiwYQP09PRQu3ZtREZGYunSpbLg9Lr09HSkp6dLwykpKe+xpkRERFSalepriNRqNfr3749Jkyahdu3aucaHh4fDzMxMCkMA4OrqCi0tLZw9e1bq07p1a+jp6Ul93NzcEB0djadPn+a7bH9/f5iamkovW1vbQlwzIiIiKk1KdSBauHAhdHR0MHr06DzHx8XFwcLCQtamo6MDc3NzxMXFSX0sLS1lfXKGc/rkZdq0aUhOTpZesbGx77MqREREVIqV6CmzN4mIiMCKFStw8eJFqFSqYl++vr4+9PX1i325REREVPxK7RGiEydOICEhAVWqVIGOjg50dHRw7949TJgwAfb29gAAKysrJCQkyKbLyspCYmIirKyspD7x8fGyPjnDOX2IiIhI2UptIOrfvz+uXLmCyMhI6WVjY4NJkybh4MGDAAAXFxckJSUhIiJCmu7IkSNQq9Vo2rSp1Of48ePIzMyU+oSGhsLR0RHlypUr3pUiIiKiUqlET5mlpqbi1q1b0vCdO3cQGRkJc3NzVKlSBeXLl5f119XVhZWVFRwdHQEAtWrVQqdOnTB06FCsW7cOmZmZ8PPzg6enp3SL/hdffIE5c+bAx8cHU6ZMwbVr17BixQosW7as+FaUiIiISrUSDUQXLlxAu3btpOHx48cDALy9vREYGFigeQQHB8PPzw8dOnSAlpYWevfujZUrV0rjTU1NcejQIfj6+sLZ2RkVKlTAzJkz33jLPRERESmLSgghSrqID0FKSgpMTU2RnJwMExOTQp23/dT9hTo/Kri7C7q+vRMREX2wCvr9XWqvISIiIiIqLgxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeDolXQDRx8x+6v6SLkGx7i7oWtIlENEHhEeIiIiISPEYiIiIiEjxGIiIiIhI8RiIiIiISPEYiIiIiEjxGIiIiIhI8RiIiIiISPEYiIiIiEjxGIiIiIhI8RiIiIiISPEYiIiIiEjxGIiIiIhI8RiIiIiISPEYiIiIiEjxSjQQHT9+HO7u7rCxsYFKpcKePXukcZmZmZgyZQrq1q2LsmXLwsbGBgMGDMDDhw9l80hMTISXlxdMTExgZmYGHx8fpKamyvpcuXIFrVq1goGBAWxtbbFo0aLiWD0iIiL6QJRoIEpLS0P9+vUREBCQa9zz589x8eJFzJgxAxcvXsSuXbsQHR2N7t27y/p5eXnh+vXrCA0Nxb59+3D8+HEMGzZMGp+SkoKOHTvCzs4OERERWLx4MWbPno3169cX+foRERHRh0GnJBfeuXNndO7cOc9xpqamCA0NlbWtXr0aTZo0wf3791GlShVERUUhJCQE58+fR+PGjQEAq1atQpcuXbBkyRLY2NggODgYGRkZ2LBhA/T09FC7dm1ERkZi6dKlsuBEREREyvVBXUOUnJwMlUoFMzMzAEB4eDjMzMykMAQArq6u0NLSwtmzZ6U+rVu3hp6entTHzc0N0dHRePr0ab7LSk9PR0pKiuxFREREH6cPJhC9ePECU6ZMQb9+/WBiYgIAiIuLg4WFhayfjo4OzM3NERcXJ/WxtLSU9ckZzumTF39/f5iamkovW1vbwlwdIiIiKkU+iECUmZmJvn37QgiBtWvXFssyp02bhuTkZOkVGxtbLMslIiKi4lei1xAVRE4YunfvHo4cOSIdHQIAKysrJCQkyPpnZWUhMTERVlZWUp/4+HhZn5zhnD550dfXh76+fmGtBhEREZVipfoIUU4YiomJwR9//IHy5cvLxru4uCApKQkRERFS25EjR6BWq9G0aVOpz/Hjx5GZmSn1CQ0NhaOjI8qVK1c8K0JERESlWokGotTUVERGRiIyMhIAcOfOHURGRuL+/fvIzMxEnz59cOHCBQQHByM7OxtxcXGIi4tDRkYGAKBWrVro1KkThg4dinPnzuHUqVPw8/ODp6cnbGxsAABffPEF9PT04OPjg+vXr2Pbtm1YsWIFxo8fX1KrTURERKVMiZ4yu3DhAtq1aycN54QUb29vzJ49G7/++isAoEGDBrLpwsLC0LZtWwBAcHAw/Pz80KFDB2hpaaF3795YuXKl1NfU1BSHDh2Cr68vnJ2dUaFCBcycOZO33BMREZGkRANR27ZtIYTId/ybxuUwNzfH5s2b39inXr16OHHihMb1ERERkTKU6muIiIiIiIoDAxEREREpHgMRERERKR4DERERESkeAxEREREpHgMRERERKR4DERERESkeAxEREREpnsaBKCgoCPv375eGJ0+eDDMzMzRv3hz37t0r1OKIiIiIioPGgeibb76BoaEhACA8PBwBAQFYtGgRKlSogHHjxhV6gURERERFTeOf7oiNjUX16tUBAHv27EHv3r0xbNgwtGjRQvp9MSIiIqIPicZHiIyMjPDPP/8AAA4dOoTPPvsMAGBgYIB///23cKsjIiIiKgYaHyH67LPPMGTIEDRs2BA3b95Ely5dAADXr1+Hvb19YddHREREVOQ0PkIUEBAAFxcXPH78GDt37kT58uUBABEREejXr1+hF0hERERU1DQ+QpSSkoKVK1dCS0uepWbPno3Y2NhCK4yIiIiouGh8hKhq1ap48uRJrvbExERUrVq1UIoiIiIiKk4aByIhRJ7tqampMDAweO+CiIiIiIpbgU+ZjR8/HgCgUqkwc+ZMlClTRhqXnZ2Ns2fPokGDBoVeIBEREVFRK3AgunTpEoCXR4iuXr0KPT09aZyenh7q16+PiRMnFn6FREREREWswIEoLCwMADBo0CCsWLECJiYmRVYUERERUXHS+C6zjRs3FkUdRERERCVG40CUlpaGBQsW4PDhw0hISIBarZaN/+uvvwqtOCIiIqLioHEgGjJkCI4dO4b+/fvD2toaKpWqKOoiIiIiKjYaB6IDBw5g//79aNGiRVHUQ0RERFTsNH4OUbly5WBubl4UtRARERGVCI0D0bx58zBz5kw8f/68KOohIiIiKnYanzL79ttvcfv2bVhaWsLe3h66urqy8RcvXiy04oiIiIiKg8aBqGfPnkVQBhEREVHJ0TgQzZo1qyjqICL6YNhP3V/SJSjW3QVdS7oE+khpfA0RERER0cdG4yNE2dnZWLZsGbZv34779+8jIyNDNj4xMbHQiiMiIiIqDhofIZozZw6WLl0KDw8PJCcnY/z48ejVqxe0tLQwe/bsIiiRiIiIqGhpHIiCg4Px/fffY8KECdDR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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(Income['Income levels'],Income['Number of Applicants'])\n",
    "\n",
    "plt.suptitle('Income Levels vs Number of Applicants')\n",
    "plt.xlabel('Income Levels')\n",
    "plt.ylabel('Number of Applicants')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "456b807e",
   "metadata": {
    "papermill": {
     "duration": 0.017696,
     "end_time": "2024-04-26T12:45:30.896918",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.879222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Loan Rating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cc7b09cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:30.934905Z",
     "iopub.status.busy": "2024-04-26T12:45:30.934480Z",
     "iopub.status.idle": "2024-04-26T12:45:30.947720Z",
     "shell.execute_reply": "2024-04-26T12:45:30.946526Z"
    },
    "papermill": {
     "duration": 0.035836,
     "end_time": "2024-04-26T12:45:30.950629",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.914793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan Rating</th>\n",
       "      <th>Number of Applicants</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Silver</td>\n",
       "      <td>1564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bronze</td>\n",
       "      <td>1425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gold</td>\n",
       "      <td>1015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Platinum</td>\n",
       "      <td>265</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Loan Rating  Number of Applicants\n",
       "0      Silver                  1564\n",
       "1      Bronze                  1425\n",
       "2        Gold                  1015\n",
       "3    Platinum                   265"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_rating = df['Loan Rating'].value_counts().reset_index()\n",
    "loan_rating = loan_rating.rename(columns={'count':'Number of Applicants'})\n",
    "\n",
    "loan_rating.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aaacbfe",
   "metadata": {
    "papermill": {
     "duration": 0.018056,
     "end_time": "2024-04-26T12:45:30.987198",
     "exception": false,
     "start_time": "2024-04-26T12:45:30.969142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Graduated or Not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c36dc5fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.089987Z",
     "iopub.status.busy": "2024-04-26T12:45:31.089606Z",
     "iopub.status.idle": "2024-04-26T12:45:31.102188Z",
     "shell.execute_reply": "2024-04-26T12:45:31.101310Z"
    },
    "papermill": {
     "duration": 0.098781,
     "end_time": "2024-04-26T12:45:31.104611",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.005830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>education</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Graduate</td>\n",
       "      <td>2144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>2125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      education  count\n",
       "0      Graduate   2144\n",
       "1  Not Graduate   2125"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "education = df['education'].value_counts().reset_index()\n",
    "\n",
    "education.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "838501a1",
   "metadata": {
    "papermill": {
     "duration": 0.018262,
     "end_time": "2024-04-26T12:45:31.141684",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.123422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Loan Range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "00954af4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.181540Z",
     "iopub.status.busy": "2024-04-26T12:45:31.180416Z",
     "iopub.status.idle": "2024-04-26T12:45:31.192715Z",
     "shell.execute_reply": "2024-04-26T12:45:31.191386Z"
    },
    "papermill": {
     "duration": 0.035179,
     "end_time": "2024-04-26T12:45:31.195571",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.160392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan Range</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Intermediate</td>\n",
       "      <td>1683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Short Term</td>\n",
       "      <td>1341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Long Term</td>\n",
       "      <td>1245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Loan Range  count\n",
       "0  Intermediate   1683\n",
       "1    Short Term   1341\n",
       "2     Long Term   1245"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_range = df['Loan Range'].value_counts().reset_index()\n",
    "\n",
    "loan_range"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad6f02bf",
   "metadata": {
    "papermill": {
     "duration": 0.019098,
     "end_time": "2024-04-26T12:45:31.234486",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.215388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Number of Employed or Not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "37c44e6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.275570Z",
     "iopub.status.busy": "2024-04-26T12:45:31.275136Z",
     "iopub.status.idle": "2024-04-26T12:45:31.288306Z",
     "shell.execute_reply": "2024-04-26T12:45:31.287366Z"
    },
    "papermill": {
     "duration": 0.037082,
     "end_time": "2024-04-26T12:45:31.290440",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.253358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>self_employed</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Yes</td>\n",
       "      <td>2150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>2119</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  self_employed  count\n",
       "0           Yes   2150\n",
       "1            No   2119"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "employment = df['self_employed'].value_counts().reset_index()\n",
    "\n",
    "eployment = employment.rename(columns={'count':'Number of Applicants'})\n",
    "employment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9139e3c7",
   "metadata": {
    "papermill": {
     "duration": 0.018787,
     "end_time": "2024-04-26T12:45:31.328382",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.309595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f79c2f5b",
   "metadata": {
    "papermill": {
     "duration": 0.019486,
     "end_time": "2024-04-26T12:45:31.367333",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.347847",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Rate of Loan Approvals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "640085be",
   "metadata": {
    "papermill": {
     "duration": 0.01877,
     "end_time": "2024-04-26T12:45:31.405214",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.386444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Overall Rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e47f80d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.449443Z",
     "iopub.status.busy": "2024-04-26T12:45:31.448949Z",
     "iopub.status.idle": "2024-04-26T12:45:31.606033Z",
     "shell.execute_reply": "2024-04-26T12:45:31.604436Z"
    },
    "papermill": {
     "duration": 0.184945,
     "end_time": "2024-04-26T12:45:31.610675",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.425730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loan = df['loan_status'].value_counts().reset_index()\n",
    "\n",
    "loans = loan.rename(columns={'count':'Number of Applicants'})\n",
    "\n",
    "loans\n",
    "\n",
    "plt.pie(loans['Number of Applicants'],labels=loans['loan_status'],autopct='%1.1f%%')\n",
    "plt.suptitle('A pie chart showing accepted/rejected status')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ee7cae1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.687194Z",
     "iopub.status.busy": "2024-04-26T12:45:31.686573Z",
     "iopub.status.idle": "2024-04-26T12:45:31.708248Z",
     "shell.execute_reply": "2024-04-26T12:45:31.707022Z"
    },
    "papermill": {
     "duration": 0.059097,
     "end_time": "2024-04-26T12:45:31.713505",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.654408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>education</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Graduate</td>\n",
       "      <td>Approved</td>\n",
       "      <td>1339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Graduate</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Approved</td>\n",
       "      <td>1317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>Rejected</td>\n",
       "      <td>808</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      education loan_status     0\n",
       "0      Graduate    Approved  1339\n",
       "1      Graduate    Rejected   805\n",
       "2  Not Graduate    Approved  1317\n",
       "3  Not Graduate    Rejected   808"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#loan approvals according to education\n",
    "\n",
    "education = df.groupby(['education','loan_status']).size().reset_index()\n",
    "\n",
    "#filter to include rejected and approved\n",
    "education = education[education['loan_status'].isin(['Approved','Rejected'])]\n",
    "\n",
    "education"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c430edac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T12:45:31.768870Z",
     "iopub.status.busy": "2024-04-26T12:45:31.767507Z",
     "iopub.status.idle": "2024-04-26T12:45:31.772757Z",
     "shell.execute_reply": "2024-04-26T12:45:31.771752Z"
    },
    "papermill": {
     "duration": 0.035713,
     "end_time": "2024-04-26T12:45:31.775651",
     "exception": false,
     "start_time": "2024-04-26T12:45:31.739938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#create a pivot table\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3523739,
     "sourceId": 6144787,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.295363,
   "end_time": "2024-04-26T12:45:32.419783",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-26T12:45:23.124420",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
